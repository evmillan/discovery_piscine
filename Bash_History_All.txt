   66  cd..
   67  cd ..
   68  cd module1
   69  cd ex00
   70  ls
   71  /usr/bin/python3 /home/emmillan/discovery_piscine/module1/ex00/name.py
   72  /usr/bin/python3 /home/emmillan/discovery_piscine/module1/ex01/name.py
   73  /usr/bin/python3 /home/emmillan/discovery_piscine/module1/ex02/age.py
   74  /usr/bin/python3 /home/emmillan/discovery_piscine/module1/ex03/whatsyourname.py
   75  /usr/bin/python3 /home/emmillan/discovery_piscine/module2/ex00/iszero.py
   76  history -a
   77  dir
   78  cd discovery_piscine
   79  history -w ~/history.txt
   80  man history
   81  history > ~/history.txt
   82  export PROMPT_COMMAND='history -a'
   83  ls
   84  cd ex00
   85  ls
   86  chmod +x iszero.py
   87  ./iszero.py
   88  cd ..
   89  export PROMPT_COMMAND='history -a;history -c;history -r'
   90  history > ~/discovery_piscine/bash_history.txt
   92  mkdir ex01
   93  cd ex01
   94  touch isneg.py
   95  pico isneg.py
   96  nano isneg.py
   97  chmod +x isneg.py
   98  ./isneg.py
   99  cd ..
  100  ls
  101  mkdir ex02
  102  cd ex02
  103  touch password.py
  104  nano password.py
  106  chmod +x password.py
  107  ./password.py
  108  history
  110  export PROMPT_COMMAND='history -a;history -c;history -r'\n
  112  cd..
  113  cd ..
  115  mkdir ex03
  116  cd ex03
  117  touch mutl.py
  119* /usr/bin/python3 /home/emmillan/discovery_piscine/module2/ex03/mutl.py
  121  ls
  124  nano mult.py
  125  chmod +x mult.py
  126  ./mult.py
  127  history
  129  cd  ..
  130  ls
  131  mkdir module3
  132  cd module3
  133  mkdir ex00
  134  cd ex00
  135  touch to25.py
  136  export PROMPT_COMMAND='history -a;history -c;history -r'
  189  mkdir ex01
  191  touch age.py
  193  cd module3
  195  cd ex00
  198* /usr/bin/python3 /home/emmillan/discovery_piscine/module3/ex00/to25.py
  199  ./to25.py
  201  cd ex001
  202  cd ex01
  204  ./multiplication_table.py
  206  cd ex02
  208  ./i_got_that.py
  209  cd ..
  210  cd ex03
  211  ls
  212  ./advanced_mult.py
  213* /usr/bin/python3 /home/emmillan/discovery_piscine/module4/ex01/age.py
  244  touch round_up.py
  245* /bin/python3 /home/emmillan/discovery_piscine/module4/ex04/round_up.py
  246  nano round_up.py
  247  chmod +x round_up.py
  248  ./round_up.py
  250  mkdir ex05
  251  cd ex05
  252  touch up_low.py
  253* /bin/python3 /home/emmillan/discovery_piscine/module4/ex05/up_low.py
  254  nano up_low.py
  255  chmod +x up_low.py
  256  ./up_low.py
  259  cd ..
  260  ls
  262  clear
  263  history
  264  history > ~/discovery_piscine/bash_history.txt
  265  export PROMPT_COMMAND='history -a;history -c;history -r'
  
 
 #!/usr/bin/env python3
import sys

def array_of_names(names_dict):
    """
    Toma un diccionario con nombres como claves y apellidos como valores.
    Devuelve una lista con los nombres completos, con la primera letra de cada parte en mayúscula.
    
    Parámetros:
        names_dict (dict): Diccionario con nombres y apellidos.

    Retorna:
        list: Lista de nombres completos formateados correctamente.
    """
    full_names = []

    for first_name, last_name in names_dict.items():
        full_name = f"{first_name.capitalize()} {last_name.capitalize()}"
        full_names.append(full_name)

    return full_names


# Ejemplo de uso (esto se puede comentar o eliminar si solo quieres el método)
if __name__ == "__main__":
    persons = {
        "juan": "perez",
        "maria": "lopez",
        "ana": "gomez",
        "jean": "valjean",
        "grace": "hopper",
        "xavier": "niel",
        "fifi": "brindacier"
    }

    nombres_completos = array_of_names(persons)
    print(nombres_completos)


#!/usr/bin/env python3
import numpy as np

def np_find_the_redheads(family_dict):
    """
    Filtra los miembros de la familia con cabello rojo usando NumPy.

    Parámetros:
    family_dict (dict): Diccionario con nombres como claves y colores de cabello como valores.

    Retorna:
    list: Lista de nombres con cabello rojo, usando .tolist().
    """
    redheads = filter(lambda name: family_dict[name].lower() == 'red', family_dict)
    return np.array(list(redheads)).tolist()

def find_the_redheads(family_dict):
    """
    Filtra los miembros de la familia con cabello rojo.

    Parámetros:
    family_dict (dict): Diccionario con nombres como claves y colores de cabello como valores.

    Retorna:
    list: Lista de nombres con cabello rojo.
    """
    redheads = filter(lambda name: family_dict[name].lower() == 'rojo', family_dict)
    return list(redheads)


if __name__ == "__main__":
    dupont_family = {
        "florian": "red",
        "marie": "blond",
        "virginie": "brunette",
        "david": "red",
        "franck": "red"
    }
    family = {
        'Ana': 'rubio',
        'Luis': 'rojo',
        'Carla': 'castaño',
        'Pedro': 'rojo',
        'Elena': 'negro'
    }


    redheads = np_find_the_redheads(dupont_family)
    print(redheads)
    lochos = find_the_redheads(family)
    print(lochos)  # Output: ['Luis', 'Pedro']


def average(grades_dict):
    """
    Calcula el promedio de las puntuaciones de una tarea.

    Parámetros:
    grades_dict (dict): Diccionario con nombres de estudiantes como claves y sus puntuaciones como valores.

    Retorna:
    float: Promedio de las puntuaciones.
    """
    if not grades_dict:
        return 0.0  # Maneja el caso de un diccionario vacío

    total_score = sum(grades_dict.values())
    num_students = len(grades_dict)
    return total_score / num_students

if __name__ == "__main__":
    scores = {
        'Alicia': 85,
        'Benito': 92,
        'Carolina': 78,
        'Diego': 90
    }
    class_3B = {
    "marine": 18,
    "jean": 15,
    "coline": 8,
    "luc": 9
    }
    class_3C = {
    "quentin": 17,
    "julie": 15,
    "marc": 8,
    "stephanie": 13
    }

    class_average = average(scores)
    print(f"El promedio de la clase es: {class_average}")
    # Output: El promedio de la clase es: 86.25
    print(f"Average for class 3B: {average(class_3B)}.")
    print(f"Average for class 3C: {average(class_3C)}.")

